[project]
name = "task-api-server"
version = "0.1.0"
description = "A simple API server manages tasks"
authors = [
    {name = "Charles Chan"}
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi (>=0.116.1,<0.117.0)",
    "uvicorn (>=0.35.0,<0.36.0)",
    "pydantic-settings (>=2.10.1,<3.0.0)",
    "pydantic (>=2.11.7,<3.0.0)"
]

[tool.poetry]
package-mode = false

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
ruff = "^0.12.7"
pytest = "^8.4.1"
mypy = "^1.17.1"
pytest-cov = "^6.2.1"
pytest-httpx = "^0.35.0"
coverage = "^7.10.1"

# ------
# ruff
# ------
pytest-trio = "^0.8.0"

[tool.ruff]
line-length = 79

[tool.ruff.lint]
select = [
    # the default ruff lint rules
    "F",
    # additional flake8 defaults next:
    "E",
    "W",
    "C90",
    # pydocstyle, isort, bandit security:
    "D",
    "I",
    "S",
    # pep8-naming
    "N",
    # pytest style
    "PT",
    # flake8-print
    "T20",
    # flake8-logging-format
    "G",
    # flake8-pie
    "PIE",
    # flake8-commas (COM)
    "COM",
    # fastAPI style
    "FAST",
    # flake8-annotations
    "ANN",
]
ignore = [
    # ignore trailing comma rule
    "COM812",
]


[tool.ruff.lint.per-file-ignores]
# Allow "assert" in tests
"tests/**.py" = ["S101"]

[tool.ruff.lint.isort]
lines-after-imports = 2

# ------
# mypy
# ------

[tool.mypy]
plugins = [
    # Use Pydantic plugin
    "pydantic.mypy",
]
# Disallows defining functions without type annotations or with incomplete type annotations
disallow_untyped_defs = true

# ------
# coverage
# ------

[tool.coverage.report]
show_missing = true
